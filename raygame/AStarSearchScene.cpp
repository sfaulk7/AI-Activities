#include "AStarSearchScene.h"
#include "Pathfinding/AStarPathfinding.h"

void AStarSearchScene::start()
{
	// create a map of nodes from some grid-based ASCII art
	m_nodeMap.cellSize = 32;
	std::vector<std::string> asciiMap;
	/*asciiMap.push_back("0000000000000000000000000");
	asciiMap.push_back("0101110111001010111011100");
	asciiMap.push_back("0101011101101010101110110");
	asciiMap.push_back("0101000000101010100000010");
	asciiMap.push_back("0111111111111111111111110");
	asciiMap.push_back("0100000010001010000001000");
	asciiMap.push_back("0111111111101011111111110");
	asciiMap.push_back("0000000000001000000000000");

	asciiMap.push_back("0000000000001000000000000");
	asciiMap.push_back("0101110111001010111011100");
	asciiMap.push_back("0101011101101010101110110");
	asciiMap.push_back("0101000000101010100000010");
	asciiMap.push_back("0111111111111111111111110");
	asciiMap.push_back("0000000000000000000000000");*/

	/*asciiMap.push_back("00000000000000000000000000000000000000000000");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("00000000000000000000000000000000000000011110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("01111000000000000000000000000000000000000000");
	asciiMap.push_back("01111111111111111111101110111011101110111010");
	asciiMap.push_back("00000000000000000010101010101010101010101010");
	asciiMap.push_back("01111111111111111110101010101010101010101010");
	asciiMap.push_back("01000000000000000000101010101010101010101010");
	asciiMap.push_back("01111111111111111110101010101010101010101010");
	asciiMap.push_back("00000000000000000010101010101010101010101010");
	asciiMap.push_back("01111111111111111110111011101110111011101110");
	asciiMap.push_back("01000000000000000000000000000000000000000010");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("00000000000000000000000000000000000000000000");*/

	asciiMap.push_back("00000000000000000000000000000000000000000000");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111111111011111111111111111110");
	asciiMap.push_back("01111111111111111110001010001111111111111110");
	asciiMap.push_back("01111111111111111110111011101111111111111110");
	asciiMap.push_back("01111111111111111110000000001111111111111110");
	asciiMap.push_back("01111111111111111111111111111111111111111110");
	asciiMap.push_back("00000000000000000000000000000000000000000000");

	m_nodeMap.Initialise(asciiMap);

	m_pathAgent = new AStarpathfinding::PathAgent;
	m_pathAgent->SetNode(m_nodeMap.GetNode(1, 1));
	m_pathAgent->speed = 500;
}

void AStarSearchScene::update(float deltaTime)
{
	Color lineColor = { 255, 255, 255, 255 };
	bool drawNodeMap = true;

	m_nodeMap.Draw(true);
	AStarpathfinding::DrawPath(m_pathAgent->path, lineColor);

	// read mouseclicks, left for start node, end for right node
	if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
	{
		Vector2 mousePos = GetMousePosition();
		AStarpathfinding::Node* end = m_nodeMap.GetClosestNode(mousePos);
		m_pathAgent->GoToNode(end);
	}

	// Changes a node to be enable or disabled when right clicked
	/*if (IsMouseButtonPressed(MOUSE_RIGHT_BUTTON))
	{
		Vector2 mousePos = GetMousePosition();
		AStarpathfinding::Node* end = m_nodeMap.GetClosestNode(mousePos);
	}*/

	m_pathAgent->Update(deltaTime);
	m_pathAgent->Draw();
}

void AStarSearchScene::end()
{
	delete m_pathAgent;
}